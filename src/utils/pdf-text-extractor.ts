import { readFileSync } from 'fs';

/**
 * Extracts text content from a PDF file for testing and validation purposes.
 * This is a simple implementation that works with basic PDFs generated by Playwright.
 * For production use, consider using a more robust PDF parsing library.
 */
export async function extractTextFromPDF(pdfPath: string): Promise<string> {
  try {
    // For now, we'll use a simple approach that works with our test PDFs
    // In a real implementation, you might use pdf-parse or similar library
    
    // Read the PDF as binary data
    const pdfBuffer = readFileSync(pdfPath);
    
    // Simple text extraction for basic PDFs (this is a simplified approach)
    // Real PDFs would need proper parsing with libraries like pdf-parse
    const pdfText = pdfBuffer.toString('binary');
    
    // Extract readable text using basic patterns
    // This works for PDFs generated by Playwright which embed text clearly
    const textMatches = pdfText.match(/\((.*?)\)/g);
    
    if (!textMatches) {
      throw new Error('Could not extract text from PDF - no text content found');
    }
    
    // Clean up extracted text
    const extractedText = textMatches
      .map(match => match.slice(1, -1)) // Remove parentheses
      .filter(text => text.trim().length > 0)
      .filter(text => !text.match(/^[\x00-\x1F\x7F-\x9F]+$/)) // Filter out control characters
      .join(' ');
    
    return extractedText;
  } catch (error) {
    throw new Error(`Failed to extract text from PDF: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Simplified PDF text extraction for testing purposes.
 * This method attempts to find text content in the PDF structure.
 */
export function extractTextSimple(pdfPath: string): string {
  try {
    const pdfBuffer = readFileSync(pdfPath);
    const pdfContent = pdfBuffer.toString('latin1');
    
    // Look for text objects in PDF structure
    const textRegex = /BT\s+.*?ET/gs;
    const textObjects = pdfContent.match(textRegex) || [];
    
    let extractedText = '';
    
    for (const textObject of textObjects) {
      // Extract strings from text objects
      const strings = textObject.match(/\([^)]*\)/g) || [];
      for (const str of strings) {
        const cleanText = str.slice(1, -1); // Remove parentheses
        if (cleanText.trim() && !cleanText.match(/^[\x00-\x1F]+$/)) {
          extractedText += cleanText + ' ';
        }
      }
    }
    
    return extractedText.trim();
  } catch (error) {
    // Fallback to the main extraction method
    return readFileSync(pdfPath, 'utf8');
  }
}